#+STARTUP: overview
#+REVEAL_THEME: sky

* Setting up
  #+BEGIN_SRC emacs-lisp
  #+END_SRC
* interface tweaks
  #+begin_src emacs-lisp :tangle yes
    (setq use-package-always-ensure t)
    (setq use-package-verbose t)
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (blink-cursor-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)
  #+end_src

* Display
** Opacity
  #+BEGIN_SRC emacs-lisp
  (defun sanityinc/adjust-opacity (frame incr)
      (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
	     (newalpha (+ incr oldalpha)))
	(when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
	  (modify-frame-parameters frame (list (cons 'alpha newalpha))))))

    (global-set-key
     (kbd "M-C-8")
     (lambda () (interactive) (sanityinc/adjust-opacity nil -2)))
    (global-set-key
     (kbd "M-C-9")
     (lambda () (interactive) (sanityinc/adjust-opacity nil 2)))
    (global-set-key
     (kbd "M-C-0")
     (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))
  #+END_SRC
** frame-titile
   #+BEGIN_SRC emacs-lisp
     (setq frame-title-format
       '(:eval
	 (if buffer-file-name
	     (replace-regexp-in-string
	      "\\\\" "/"
	      (replace-regexp-in-string
	       (regexp-quote (getenv "HOME")) "~"
	       (convert-standard-filename buffer-file-name)))
	   (buffer-name))))
   #+END_SRC
* load prfer newer commented
  #+BEGIN_SRC emacs-lisp
    ;; (setq load-prefer-newer t)          
  #+END_SRC
* try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :defer 10)
#+END_SRC

* which-key commented maybe uncomment later
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :defer 3
    :config
    (which-key-mode))
#+END_SRC

* Org-mode
  [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][maybe try this]]

  #+BEGIN_SRC emacs-lisp

    (use-package org-bullets
      :defer t
      :bind (("C-c l" . org-store-link)
	     ("C-c a" . org-agenda)
	     ("C-c c" . org-iswitchb))
      :hook (org-mode . org-bullets-mode))


    ;;steal from hrs
    (setq org-directory "~/Dropbox/notes")

    (setq org-default-notes-file (concat org-directory "/notes.org"))

    (defun org-file-path (filename)
      "Return the absolute address of an org file, given its relative name."
      (concat (file-name-as-directory org-directory) filename))

    (setq org-index-file (org-file-path "index.org"))
    (setq org-default-notes-file org-index-file)
    (setq org-archive-location
	  (concat (org-file-path "archive.org") "::* From %s"))

    (setq org-agenda-files (list org-index-file))

    (defun hrs/mark-done-and-archive ()
      "Mark the state of an org-mode item as DONE and archive it."
      (interactive)
      (org-todo 'done)
      (org-archive-subtree))

    (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)

    (setq org-log-done 'time)
    ;;(setq org-agenda-files (list "~/Dropbox/notes/schedule.org"))

    (add-to-list 'org-structure-template-alist
		 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    (add-hook 'org-mode-hook
	      '(lambda ()
		 (visual-line-mode 1)))
    (setq org-hide-emphasis-markers t)
    (require 'cl)				;for delete*
    (setq org-emphasis-alist
	  (cons '("+" (:strike-through t :foreground "gray"))
		(delete* "+" org-emphasis-alist :key 'car :test 'equal)))
    (setq org-emphasis-alist
	  (cons '("*" (bold :foreground "red"))
		(delete* "*" org-emphasis-alist :key 'car :test 'equal)))
    ;; 使得中英文表格对其, 需要先安装https://www.google.co.kr/get/noto/
    ;; (set-face-attribute 'org-table nil :family "Noto Sans Mono CJk SC")

    ;; for python
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))
  #+END_SRC
** Refiling according to the document’s hierarchy.
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-use-outline-path t)
     (setq org-outline-path-complete-in-steps nil)
   #+END_SRC
** Hit C-c i to quickly open up my todo list.
   #+BEGIN_SRC emacs-lisp
     (defun my/open-index-file ()
       "Open the master org TODO list."
       (interactive)
       (find-file org-index-file)
       (flycheck-mode -1)
       (end-of-buffer))

     (global-set-key (kbd "C-c i") 'my/open-index-file)
   #+END_SRC
** ox-*
   #+BEGIN_SRC emacs-lisp
     (use-package ox-twbs
       :after org-mode)
   #+END_SRC
** org-pdfview
   #+begin_src emacs-lisp :tangle yes
     (use-package org-pdfview
       :defer 4)
   #+end_src
* Ido commented
#+BEGIN_SRC emacs-lisp
;; ;; ido-mode
;; (setq ido-enable-flex-matching t)
;; (setq ido-everywhere t)
;; (ido-mode 1)

#+END_SRC
* IBUFFER commented
#+BEGIN_SRC emacs-lisp
  ;; ;;(defalias 'list-buffers 'ibuffer)
  ;; (defalias 'list-buffers 'ibuffer-other-window)
#+END_SRC
* Backups
  copy from SachaChua
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (setq delete-old-versions -1)
    (setq version-control t)
    (setq vc-make-backup-files t)
    (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  #+END_SRC
* Ace window for easy window switching
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (global-set-key [remap other-window] 'ace-window)
    (global-set-key (kbd "M-o") 'ace-swap-window)
    (setq aw-swap-invert t)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+END_SRC

* Winner-mode
  #+BEGIN_SRC emacs-lisp
    (use-package winner
      :config
      (winner-mode))
  #+END_SRC

* Helm

  #+BEGIN_SRC emacs-lisp
    ;; based on http://tuhdo.github.io/helm-intro.html
    (use-package helm
      :bind (("M-x" . helm-M-x)
	     ("M-y" . helm-show-kill-ring)
	     ("C-c h" . helm-command-prefix)
	     ("C-h SPC" . helm-all-mark-rings)
	     ("C-x r b" . helm-filtered-bookmarks)
	     ("C-x C-f" . helm-find-files)
	     ("C-x b" . helm-mini)
	     :map helm-map
	     ;; rebind tab to run persistent action
	     ("<tab>" . helm-execute-persistent-action)
	     ;; make Tab work in terminal
	     ("C-i" . helm-execute-persistent-action)
	     ("C-z" . helm-select-action))
      :config
      (require 'helm-config)
      (global-unset-key (kbd "C-x c"))
      (global-set-key (kbd "C-c h o") 'helm-occur)
      (when (executable-find "curl")
	(setq helm-google-suggest-use-curl-p t))
      (when (string= system-type "darwin")       
	;; brew info findutils
	(setq helm-locate-command
	      "glocate %s %s"
	      helm-locate-create-db-command
	      "gupdatedb --output='%s' --localpaths='%s'"))

      (setq helm-split-window-inside-p t ; open helm buffer inside current window, not occupy whole other window
	    ; helm-move-to-line-cycle-in-source t
	    helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp
	    helm-scroll-amount 8 ; scroll 8 lines other window using M-<next>/M-<prior>
	    helm-ff-file-name-history-use-recentf t
	    helm-echo-input-in-header-line t
	    ;; helm-autoresize-max-height 0
	    ;; helm-autoresize-min-height 20
	    helm-M-x-fuzzy-match t
	    helm-ff-auto-update-initial-value 1)
	    ;; (helm-autoresize-mode 1)
  
      (custom-set-faces
       '(helm-selection ((t (:background "systemPurpleColor" :foreground "white")))))
      (helm-mode 1))

  #+END_SRC
** helm-ls-git
  #+BEGIN_SRC emacs-lisp
    (use-package helm-ls-git
      :after
      (helm-mode)
      :config
      (global-set-key (kbd "C-x C-d") 'helm-browse-project))
  #+END_SRC
* Projectile

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :bind-keymap
      ("C-c p" . projectile-command-map)
      ("s-p" . projectile-command-map)
      :config
      (setq projectile-completion-system 'helm)
      (setq projectile-switch-project-action 'helm-projectile)
      ;; (setq projectile-enable-caching t)
      (projectile-mode +1))
  #+END_SRC
* Helm-projectile
  #+BEGIN_SRC emacs-lisp
    (use-package helm-projectile
      :defer t
      :ensure t
      :config
      (helm-projectile-on))
  #+END_SRC
* Helm descbinds
  #+BEGIN_SRC emacs-lisp
    (use-package helm-descbinds
      :defer 7
      :config
      (helm-descbinds-mode))
  #+END_SRC
* Swiper / Ivy / Counsel commented
#   [[https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/][TIP: How to use Ivy and its utilities in your workflow]]
# Swiper gives us a really efficient incremental search with regular
# expressions and Ivy / Counsel replace a lot of ido or helms completion
# functionality

  #+BEGIN_SRC emacs-lisp
    ;; (use-package ivy
    ;;   :diminish (ivy-mode)
    ;;   :config
    ;;   (setq ivy-count-format "%d/%d "))

    ;; (use-package counsel
    ;;   :after ivy
    ;;   :bind
    ;;   ("M-y" . counsel-yank-pop))


    ;; ;; Swiper
    ;; (use-package swiper
    ;;   :bind
    ;;    ("C-s" . swiper)
    ;;    ("C-r" . swiper)
    ;;    ;; ("C-c C-r" . ivy-resume)
    ;;    ("M-x" . counsel-M-x)
    ;;    ("C-x C-f" . counsel-find-file)
    ;;    ("C-x b" . ivy-switch-buffer)
    ;;    ("C-c g" . counsel-git)
    ;;    ("C-c j" . counsel-git-grep)
    ;;    ("C-c k" . counsel-ag)
    ;;    ("C-x l" . counsel-locate)
    ;;    ("C-S-o" . counsel-rhythmbox)
    ;;   :config
    ;;   (ivy-mode 1)
    ;;   (setq ivy-use-virtual-buffers t)
    ;;   ;; (setq ivy-display-style 'fancy)
    ;;   (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
  #+END_SRC

* Avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind
    ("M-s a" . avy-goto-char))
#+END_SRC

* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :diminish (company-mode)
      :hook (prog-mode . company-mode)
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-lenth 3))
  #+END_SRC

* Themes
** Color theme modern commented
   #+BEGIN_SRC emacs-lisp
     ;; (use-package color-theme-modern)
   #+END_SRC
** leuven commented
    # #+BEGIN_SRC emacs-lisp
    #   (use-package leuven-theme)
    # #+END_SRC
** Sanityinc tomorrow
   #+BEGIN_SRC emacs-lisp
     (use-package color-theme-sanityinc-tomorrow)
   #+END_SRC

** Doom commented
   #+BEGIN_SRC emacs-lisp
     ;; (use-package doom-themes)
   #+END_SRC
** solarized-theme
   #+BEGIN_SRC emacs-lisp
     (use-package solarized-theme
       :disabled t)
   #+END_SRC
** load theme
   #+BEGIN_SRC emacs-lisp
     (load-theme 'sanityinc-tomorrow-bright t)
   #+END_SRC

* Reveal.js
  [[https://github.com/yjwen/org-reveal/tree/001567cc12d50ba07612edd1718b86a12e8c2547][yjwen/org-reveal]]
  [[https://cdn.jsdelivr.net/npm/reveal.js@3.6.0][reveal.js]]
  [[https://github.com/hakimel/reveal.js][hakimel/reveal.js]]
  [[https://github.com/hakimel/reveal.js/blob/master/js/reveal.js]]
  [[https://github.com/yjwen/org-reveal/issues/324][error "Need package ‘org-20150330’]]
** Reveal theme
  [[https://github.com/hakimel/reveal.js/tree/master/css/theme][check the themes]]

  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :defer 5
      :load-path "~/workspace/git/org-reveal")
;;      :hook org-mode)

    ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.8.0/")
    ;;(setq org-reveal-root "file:/Users/zhaoweipu/workspace/git/reveal.js/")
    (setq org-reveal-mathjax t)

    (use-package htmlize)
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :hook
      (prog-mode. flycheck-mode))
  #+END_SRC
** flycheck-color-mode-line
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-color-mode-line
       :hook (flycheck-mode . flycheck-color-mode-line-mode))
   #+END_SRC
* linum-mode

  #+BEGIN_SRC emacs-lisp
    ;; (use-package linum-mode
    ;;   :hook
    ;;   (prog-mode))
    (add-hook 'prog-mode-hook 'linum-mode)
  #+END_SRC
* Python

  #+BEGIN_SRC emacs-lisp
    ;; The package is "python" but the mode is "python-mode":
    (use-package python
      :mode ("\\.py\\'" . python-mode)
      :interpreter ("python" . python-mode))
  #+END_SRC
** slince the guess indent warning
   #+BEGIN_SRC emacs-lisp
     (setq python-indent-guess-indent-offset t)
     (setq python-indent-guess-indent-offset-verbose nil)
   #+END_SRC
** pyvenv
   #+BEGIN_SRC emacs-lisp
     (use-package pyvenv
       :hook (python-mode . pyvenv-mode)
       :config
       (setenv "WORKON_HOME" "/usr/local/anaconda3/envs")
       (pyvenv-workon "py3"))

   #+END_SRC

** Elpy
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :disabled t
       :defer t
       :hook
       (python-mode . elpy-mode)
       :config
       (setq eldoc-idle-delay 1)
       (when (require 'flycheck nil t)
         (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))

         ;; force it to use balck, as there this function in elpy.el seems
         ;; can't find black
       (defun elpy-format-code ()
         "Format code using the available formatter."
         (interactive)
         (elpy-black-fix-code)))
   #+END_SRC

** anaconda mode with blacken
   #+BEGIN_SRC emacs-lisp

     (use-package anaconda-mode
       :commands anaconda-mode
       :ensure t
       :init
       (add-hook 'python-mode-hook 'anaconda-mode)
       (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
       :config
       (define-key anaconda-mode-map  (kbd "M-/") 'anaconda-mode-show-doc)
       (define-key anaconda-mode-map  (kbd "M-.") 'anaconda-mode-find-definitions)
       (define-key anaconda-mode-map  (kbd "M-,") 'pop-tag-mark)
       (define-key anaconda-mode-map  (kbd "M-r") nil)
       (setq anaconda-mode-localhost-address "localhost"))

     ;; Auto completion
     (use-package company-anaconda
       :after (anaconda-mode company)
       :ensure t)
     (eval-after-load "company"
       '(add-to-list 'company-backends 'company-anaconda))

     ;;black
     (use-package blacken
       :ensure t)
   #+END_SRC
*** https://github.com/proofit404/anaconda-mode/issues/255
    #+BEGIN_SRC emacs-lisp
      (setq url-proxy-services
            '(("no_proxy" . "^\\(127.0.0.1\\|localhost\\|10.*\\)")
              ("http" . "127.0.0.1:6152")
              ("https" . "127.0.0.1:6152")))
    #+END_SRC

* Web-mode
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :defer 5
      :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
      (setq web-mode-engines-alist
            '(("django"    . "\\.html\\'")))
      (setq web-mode-ac-sources-alist
            '(("css" . (ac-source-css-property))
              ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
              ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t))
    (setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned

  #+END_SRC
* PHP
  #+BEGIN_SRC emacs-lisp
    (use-package php-mode
      :mode ("\\.php\\'" . php-mode)
      :interpreter ("php" . python-mode))
  #+END_SRC
* Lua
  #+BEGIN_SRC emacs-lisp
    (use-package lua-mode
      :mode "\\.lua\\'"
      :interpreter "lua"
      :config
      (setq lua-indent-level 4))
  #+END_SRC
* nginx mode
  #+BEGIN_SRC emacs-lisp
    (use-package nginx-mode)
  #+END_SRC
* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :defer 3
      :diminish (yas-minor-mode)
      ;;:after flycheck
      :init
      (yas-global-mode 1))

    (use-package yasnippet-snippets)
  #+END_SRC
* Git
** Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :bind
      ("C-x g" . magit-status)
      ("C-x M-g" . magit-dispatch-popup))
  #+END_SRC
** Git gutter
   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter
       :defer 1
       :diminish git-gutter-mode
       :init
       (global-git-gutter-mode +1))
   #+END_SRC
* Undo tree commented
  - use C-x u to see the visual undo tree
  - use C-x p / n / f b
  - q to quit the undo tree visualizer
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :disabled t
      :diminish (undo-tree-mode)
      :init
      (global-undo-tree-mode))
  #+END_SRC

* Misc packages
**  turn off indent-tabs-mode
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** enable-recursive-minibuffer commented
   This makes M-y also works at minibuffer when using swiper 
   [[https://github.com/abo-abo/swiper/issues/31][Unable to do query-replace in swiper]]
   #+BEGIN_SRC emacs-lisp
     ;; (setq enable-recursive-minibuffers t)
   #+END_SRC
** Smart mode line commented
   #+BEGIN_SRC emacs-lisp
     ;;  (use-package smart-mode-line
     ;;    :init
     ;; ;;   (setq sml/override-theme nil)
     ;;    (setq sml/no-confirm-load-theme t)
     ;;    :config
     ;;     (sml/setup))
   #+END_SRC
** Highlight line mode commented
   # #+BEGIN_SRC emacs-lisp
   #   (global-hl-line-mode t)
   # #+END_SRC

** Beacon mode commented
   # #+BEGIN_SRC emacs-lisp
   #   (use-package beacon
   #     :ensure t
   #     :config
   #     (beacon-mode 1))
   #   ;; may need to change the color with differnt themes
   #   (setq beacon-color "#666600")           
   # #+END_SRC
** Hungry Delete mode commented
   #+BEGIN_SRC emacs-lisp
     ;; (use-package hungry-delete
     ;;   :config
     ;;   (global-hungry-delete-mode))
   #+END_SRC
** Expand Region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))
   #+END_SRC
** iedit
   #+BEGIN_SRC emacs-lisp
     (use-package iedit)
   #+END_SRC
** Narrowing
   [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Emacs narrow-or-widen-dwim Endless Parentheses]]
   #+BEGIN_SRC emacs-lisp
     (defun narrow-or-widen-dwim (p)
       "Widen if buffer is narrowed, narrow-dwim otherwise.
     Dwim means: region, org-src-block, org-subtree, or
     defun, whichever applies first. Narrowing to
     org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer
     is already narrowed."
       (interactive "P")
       (declare (interactive-only))
       (cond ((and (buffer-narrowed-p) (not p)) (widen))
	     ((region-active-p)
	      (narrow-to-region (region-beginning)
				(region-end)))
	     ((derived-mode-p 'org-mode)
	      ;; `org-edit-src-code' is not a real narrowing
	      ;; command. Remove this first conditional if
	      ;; you don't want it.
	      (cond ((ignore-errors (org-edit-src-code) t)
		     (delete-other-windows))
		    ((ignore-errors (org-narrow-to-block) t))
		    (t (org-narrow-to-subtree))))
	     ((derived-mode-p 'latex-mode)
	      (LaTeX-narrow-to-environment))
	     (t (narrow-to-defun))))

     ;; (define-key endless/toggle-map "n #'narrow-or-widen-dwim)
     ;; This line actually replaces Emacs' entire narrowing
     ;; keymap, that's how much I like this command. Only
     ;; copy it if that's what you want.
     (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
     (add-hook 'LaTeX-mode-hook
	       (lambda ()
		 (define-key LaTeX-mode-map "\C-xn"
		   nil)))
     (eval-after-load 'org-src
       '(define-key org-src-mode-map
	  "\C-x\C-s" #'org-edit-src-exit))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** [[http://pragmaticemacs.com/emacs/add-the-system-clipboard-to-the-emacs-kill-ring/][ADD THE SYSTEM CLIPBOARD TO THE EMACS KILL-RING]]
   #+BEGIN_SRC emacs-lisp
     (setq save-interprogram-paste-before-kill t)
   #+END_SRC

** Diminish
   #+BEGIN_SRC emacs-lisp
   (use-package diminish)
   #+END_SRC

* Load other files
  #+BEGIN_SRC emacs-lisp
    (defun load-if-exists (f)
      "load the elisp file only if it exists and is readable"
      (if (file-readable-p f)
	  (load-file f)))
  #+END_SRC
* mu4e
  [[file+emacs:~/.mbsyncrc][mbsyncrc]]
  [[file+emacs:~/Dropbox/mu4econfig.el][mu4eConfig.el]]
  #+BEGIN_SRC emacs-lisp
    ;; (load "~/Dropbox/mu4econfig.el" t)
  #+END_SRC
* Tramp
#   #+BEGIN_SRC emacs-lisp
#   (setq tramp-shell-prompt-pattern "\\(?:^\\|\\)[^]#$%>
# ]*#?[]#$%>].* *\\(\\[[0-9;]*[a-zA-Z] *\\)*")
#   #+END_SRC
* Treemacs commented
  [[https://github.com/Alexander-Miller/treemacs][treeemacs]]
  # #+BEGIN_SRC emacs-lisp
  #   (use-package treemacs
  #     :defer t
  #     :init
  #     (with-eval-after-load 'winum
  # 	(define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  #     :config
  #     (progn
  # 	(setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
  # 	      treemacs-deferred-git-apply-delay      0.5
  # 	      treemacs-display-in-side-window        t
  # 	      treemacs-eldoc-display                 t
  # 	      treemacs-file-event-delay              5000
  # 	      treemacs-file-follow-delay             0.2
  # 	      treemacs-follow-after-init             t
  # 	      treemacs-git-command-pipe              ""
  # 	      treemacs-goto-tag-strategy             'refetch-index
  # 	      treemacs-indentation                   2
  # 	      treemacs-indentation-string            " "
  # 	      treemacs-is-never-other-window         nil
  # 	      treemacs-max-git-entries               5000
  # 	      treemacs-missing-project-action        'ask
  # 	      treemacs-no-png-images                 nil
  # 	      treemacs-no-delete-other-windows       t
  # 	      treemacs-project-follow-cleanup        nil
  # 	      treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
  # 	      treemacs-recenter-distance             0.1
  # 	      treemacs-recenter-after-file-follow    nil
  # 	      treemacs-recenter-after-tag-follow     nil
  # 	      treemacs-recenter-after-project-jump   'always
  # 	      treemacs-recenter-after-project-expand 'on-distance
  # 	      treemacs-show-cursor                   nil
  # 	      treemacs-show-hidden-files             t
  # 	      treemacs-silent-filewatch              nil
  # 	      treemacs-silent-refresh                nil
  # 	      treemacs-sorting                       'alphabetic-desc
  # 	      treemacs-space-between-root-nodes      t
  # 	      treemacs-tag-follow-cleanup            t
  # 	      treemacs-tag-follow-delay              1.5
  # 	      treemacs-width                         35)

  # 	;; The default width and height of the icons is 22 pixels. If you are
  # 	;; using a Hi-DPI display, uncomment this to double the icon size.
  # 	;;(treemacs-resize-icons 44)

  # 	(treemacs-follow-mode t)
  # 	(treemacs-filewatch-mode t)
  # 	(treemacs-fringe-indicator-mode t)
  # 	(pcase (cons (not (null (executable-find "git")))
  # 		     (not (null (executable-find "python3"))))
  # 	  (`(t . t)
  # 	   (treemacs-git-mode 'deferred))
  # 	  (`(t . _)
  # 	   (treemacs-git-mode 'simple))))
  #     :bind
  #     (:map global-map
  # 	    ("M-0"       . treemacs-select-window)
  # 	    ("C-x t 1"   . treemacs-delete-other-windows)
  # 	    ("C-x t t"   . treemacs)
  # 	    ("C-x t B"   . treemacs-bookmark)
  # 	    ("C-x t C-t" . treemacs-find-file)
  # 	    ("C-x t M-t" . treemacs-find-tag)))

  #   (use-package treemacs-projectile
  #     :after treemacs projectile
  #     :ensure t)

  #   (use-package treemacs-icons-dired
  #     :after treemacs dired
  #     :ensure t
  #     :config (treemacs-icons-dired-mode))

  #   (use-package treemacs-magit
  #     :after treemacs magit
  #     :ensure t)
  # #+END_SRC

* Deft for notes
  [[https://jblevins.org/projects/deft/][deft]]
  #+BEGIN_SRC emacs-lisp
    (use-package deft
      :bind ("C-c d" . deft)
      :commands (deft)
      :config
      (setq deft-directory "~/Dropbox/notes"
	    deft-extensions '("org")
	    deft-default-extension "org"
	    deft-use-filename-as-title t
	    deft-use-filter-string-for-filename t))
  #+END_SRC

* pdf
  [[https://github.com/politza/pdf-tools/issues/480][pdf-tools issue-480]]

  #+BEGIN_SRC emacs-lisp
    (setenv "PKG_CONFIG_PATH" "/usr/local/lib/pkgconfig:/usr/local/Cellar/libffi/3.2.1/lib/pkgconfig")
    (use-package pdf-tools
      :magic ("%PDF" . pdf-view-mode)
      :config
      (pdf-tools-install :no-query))

    ;; (use-package pdf-tools
    ;;   :config
    ;;   (pdf-loader-install))


  #+END_SRC

* [[https://emacsredux.com/blog/2013/03/27/open-file-in-external-program/][Open File in External Program]]
  
  #+BEGIN_SRC emacs-lisp
    (defun er-open-with (arg)
      "Open visited file in default external program.

    With a prefix ARG always prompt for command to use."
      (interactive "P")
      (when buffer-file-name
	(shell-command (concat
			(cond
			 ((and (not arg) (eq system-type 'darwin)) "open")
			 ((and (not arg) (member system-type '(gnu gnu/linux gnu/kfreebsd))) "xdg-open")
			 (t (read-shell-command "Open current file with: ")))
			" "
			(shell-quote-argument buffer-file-name)))))
    (global-set-key (kbd "C-c o") #'er-open-with)
  #+END_SRC

* Dictionary
** sdcv
   #+BEGIN_SRC emacs-lisp
     (use-package showtip
       :ensure t)
     (use-package popup
       :ensure t)
     (use-package pos-tip
       :ensure t)

     (use-package sdcv
       :load-path "~/workspace/git/sdcv.el"
       :demand t
       :config
       (global-set-key (kbd "C-x t") 'sdcv-search-pointer))
   #+END_SRC

* wsd-mode
  #+BEGIN_SRC emacs-lisp
    (use-package wsd-mode
      :defer 3
      :config
      (setq wsd-style "napkin"))
  #+END_SRC
* Trouble Shoot
** Failed to initialize color list unarchiver
   #+BEGIN_SRC emacs-lisp
     (delete-file "~/Library/Colors/Emacs.clr")
   #+END_SRC
** dired-use-ls-dired
   #+begin_src emacs-lisp :tangle yes
     (when (string= system-type "darwin")       
       (setq dired-use-ls-dired nil))
   #+end_src

* [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Yank more]]

* [[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell]]
  
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell)
    (when (string= system-type "darwin")
      (exec-path-from-shell-initialize))
  #+END_SRC
